var fs = require("fs"); // may want to do some synchronous operations
var Qfs = require("q-io/fs"); // may want to do some synchronous operations
var Q = require("q");
var Path = require("path");
var yargs = require("yargs");
var _ = require("underscore");
var colors = require("colors");
var spawn = require("child_process").spawn;

var baseSize = 1920;
var newScale;

module.exports = processFile;

function processFile(src, size){
	newScale = size/baseSize;
	switch(Path.extname(src).toLowerCase()){
		case ".jpg":
			console.log("Processing JPG".yellow, src);
			var p = processJPG(src, size);
			return p;
		case ".png":
			console.log("Processing PNG".magenta, src);
			return processPNG(src, size);
		case ".json":
			//console.log("Processing JSON".yellow, src);
			//return processJSON(src, size);
		
	}
}

function processJPG(src, size){
	return resize(src, size);
}

function processPNG(src, size){
	return resize(src, size)
		.then(function(){
			return quant(src);
		});
}

function processJSON(src, size){
	console.log("/////// update filmstrip json".green);
	return Qfs.read(src)
		.then(function(jsonString){
			var jsonObj = JSON.parse(jsonString);
			_.each(jsonObj.frames, function(frameObj, frameName){
				frameObj.frame.x = Math.floor(frameObj.frame.x * newScale);
				frameObj.frame.y = Math.floor(frameObj.frame.y * newScale);
				frameObj.frame.w = Math.floor(frameObj.frame.w * newScale);
				frameObj.frame.h = Math.floor(frameObj.frame.h * newScale);
				frameObj.spriteSourceSize.w = Math.floor(frameObj.spriteSourceSize.w * newScale);
				frameObj.spriteSourceSize.h = Math.floor(frameObj.spriteSourceSize.h * newScale);
				frameObj.sourceSize.w = Math.floor(frameObj.sourceSize.w * newScale);
				frameObj.sourceSize.h = Math.floor(frameObj.sourceSize.h * newScale);
			});
			jsonObj.meta.size.w = Math.floor(jsonObj.meta.size.w * newScale);
			jsonObj.meta.size.h = Math.floor(jsonObj.meta.size.h * newScale);
			return jsonObj;
		})
		.then(function(jsonObj){
			return Qfs.write(src, JSON.stringify(jsonObj));
		})
        .fail(function (err) {
            console.error('[convert json] ERROR: '.red, err);
        });
}

function resize(src, size){
	console.log("///////".green, (100*newScale) + "%");
	var d = Q.defer();
	var ls = spawn("convert", [src, "-resize", (100*newScale) + "%", "-sharpen", "0x1.0", src ]);
	ls.stdout.on('data', function (data) {
	});

	ls.stderr.on('data', function (data) {
		d.reject(data, ["convert", src, "-resize", (100*newScale) + "%", src ].join(" "));
	});

	ls.on('close', function (code) {
		d.resolve();
	});
	return d.promise;
}

function quant(src){
	console.log(("\\\\\\\\\\\\\\").green,"quantize");

	var d = Q.defer();
	var colors = src.indexOf("car_") > -1 ? 256 : 128;
	var ls = spawn("pngquant", ["-o", src, "--force", colors, src])
	ls.stdout.on('data', function (data) {
	});

	ls.stderr.on('data', function (data) {
		d.reject(["pngquant", "-o", src, "--force", colors, src].join(" "));
	});

	ls.on('close', function (code) {
		d.resolve();
	});
	return d.promise;
}

			